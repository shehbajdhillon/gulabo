// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package postgres

import (
	"context"
	"database/sql"
	"encoding/json"
)

const addUser = `-- name: AddUser :one

INSERT INTO user_info (telegram_user_id, telegram_username, telegram_first_name, telegram_last_name) VALUES ($1, $2, $3, $4) RETURNING user_id, telegram_user_id, telegram_username, telegram_first_name, telegram_last_name, created
`

type AddUserParams struct {
	TelegramUserID    int64
	TelegramUsername  sql.NullString
	TelegramFirstName sql.NullString
	TelegramLastName  sql.NullString
}

// ------------------ UserInfo Queries --------------------
func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, addUser,
		arg.TelegramUserID,
		arg.TelegramUsername,
		arg.TelegramFirstName,
		arg.TelegramLastName,
	)
	var i UserInfo
	err := row.Scan(
		&i.UserID,
		&i.TelegramUserID,
		&i.TelegramUsername,
		&i.TelegramFirstName,
		&i.TelegramLastName,
		&i.Created,
	)
	return i, err
}

const addUserCreditsByTelegramUserId = `-- name: AddUserCreditsByTelegramUserId :one
UPDATE user_credits
SET credits_balance = credits_balance + $1, updated = CURRENT_TIMESTAMP
FROM user_info
WHERE user_credits.user_id = user_info.user_id AND user_info.telegram_user_id = $2
RETURNING user_credits.id, user_credits.user_id, user_credits.credits_balance, user_credits.created, user_credits.updated
`

type AddUserCreditsByTelegramUserIdParams struct {
	Amount         int32
	TelegramUserID int64
}

func (q *Queries) AddUserCreditsByTelegramUserId(ctx context.Context, arg AddUserCreditsByTelegramUserIdParams) (UserCredit, error) {
	row := q.db.QueryRowContext(ctx, addUserCreditsByTelegramUserId, arg.Amount, arg.TelegramUserID)
	var i UserCredit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreditsBalance,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createConversation = `-- name: CreateConversation :one

INSERT INTO conversations (telegram_user_id, messages)
VALUES ($1, '[]'::jsonb) RETURNING id, telegram_user_id, messages, created, updated
`

// ------------------ Conversation Queries --------------------
func (q *Queries) CreateConversation(ctx context.Context, telegramUserID int64) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation, telegramUserID)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.TelegramUserID,
		&i.Messages,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createUserCredits = `-- name: CreateUserCredits :one

INSERT INTO user_credits (user_id, credits_balance) VALUES ($1, 10) RETURNING id, user_id, credits_balance, created, updated
`

// ------------------ User Credits Queries --------------------
func (q *Queries) CreateUserCredits(ctx context.Context, userID int64) (UserCredit, error) {
	row := q.db.QueryRowContext(ctx, createUserCredits, userID)
	var i UserCredit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreditsBalance,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const decrementUserCreditsByTelegramUserId = `-- name: DecrementUserCreditsByTelegramUserId :one
UPDATE user_credits
SET credits_balance = credits_balance - 1, updated = CURRENT_TIMESTAMP
FROM user_info
WHERE user_credits.user_id = user_info.user_id AND user_info.telegram_user_id = $1 AND user_credits.credits_balance > 0
RETURNING user_credits.id, user_credits.user_id, user_credits.credits_balance, user_credits.created, user_credits.updated
`

func (q *Queries) DecrementUserCreditsByTelegramUserId(ctx context.Context, telegramUserID int64) (UserCredit, error) {
	row := q.db.QueryRowContext(ctx, decrementUserCreditsByTelegramUserId, telegramUserID)
	var i UserCredit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreditsBalance,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteUserByTelegramUserId = `-- name: DeleteUserByTelegramUserId :exec
DELETE FROM user_info WHERE telegram_user_id = $1
`

func (q *Queries) DeleteUserByTelegramUserId(ctx context.Context, telegramUserID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserByTelegramUserId, telegramUserID)
	return err
}

const getConversationByTelegramUserId = `-- name: GetConversationByTelegramUserId :one
SELECT id, telegram_user_id, messages, created, updated FROM conversations WHERE telegram_user_id = $1 LIMIT 1
`

func (q *Queries) GetConversationByTelegramUserId(ctx context.Context, telegramUserID int64) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversationByTelegramUserId, telegramUserID)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.TelegramUserID,
		&i.Messages,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getUserByTelegramUserId = `-- name: GetUserByTelegramUserId :one
SELECT user_id, telegram_user_id, telegram_username, telegram_first_name, telegram_last_name, created FROM user_info WHERE telegram_user_id = $1 LIMIT 1
`

func (q *Queries) GetUserByTelegramUserId(ctx context.Context, telegramUserID int64) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, getUserByTelegramUserId, telegramUserID)
	var i UserInfo
	err := row.Scan(
		&i.UserID,
		&i.TelegramUserID,
		&i.TelegramUsername,
		&i.TelegramFirstName,
		&i.TelegramLastName,
		&i.Created,
	)
	return i, err
}

const getUserCreditsByTelegramUserId = `-- name: GetUserCreditsByTelegramUserId :one
SELECT uc.credits_balance FROM user_credits uc JOIN user_info ui ON uc.user_id = ui.user_id WHERE ui.telegram_user_id = $1
`

func (q *Queries) GetUserCreditsByTelegramUserId(ctx context.Context, telegramUserID int64) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUserCreditsByTelegramUserId, telegramUserID)
	var credits_balance int32
	err := row.Scan(&credits_balance)
	return credits_balance, err
}

const getUserCreditsByUserID = `-- name: GetUserCreditsByUserID :one
SELECT id, user_id, credits_balance, created, updated FROM user_credits WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserCreditsByUserID(ctx context.Context, userID int64) (UserCredit, error) {
	row := q.db.QueryRowContext(ctx, getUserCreditsByUserID, userID)
	var i UserCredit
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CreditsBalance,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const updateConversationMessages = `-- name: UpdateConversationMessages :one
UPDATE conversations 
SET messages = $2, updated = CURRENT_TIMESTAMP 
WHERE telegram_user_id = $1 
RETURNING id, telegram_user_id, messages, created, updated
`

type UpdateConversationMessagesParams struct {
	TelegramUserID int64
	Messages       json.RawMessage
}

func (q *Queries) UpdateConversationMessages(ctx context.Context, arg UpdateConversationMessagesParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, updateConversationMessages, arg.TelegramUserID, arg.Messages)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.TelegramUserID,
		&i.Messages,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
