// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package postgres

import (
	"context"
	"database/sql"
	"encoding/json"
)

const addUser = `-- name: AddUser :one

INSERT INTO user_info (telegram_user_id, telegram_username, telegram_first_name, telegram_last_name) VALUES ($1, $2, $3, $4) RETURNING user_id, telegram_user_id, telegram_username, telegram_first_name, telegram_last_name, created
`

type AddUserParams struct {
	TelegramUserID    int64
	TelegramUsername  sql.NullString
	TelegramFirstName sql.NullString
	TelegramLastName  sql.NullString
}

// ------------------ UserInfo Queries --------------------
func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, addUser,
		arg.TelegramUserID,
		arg.TelegramUsername,
		arg.TelegramFirstName,
		arg.TelegramLastName,
	)
	var i UserInfo
	err := row.Scan(
		&i.UserID,
		&i.TelegramUserID,
		&i.TelegramUsername,
		&i.TelegramFirstName,
		&i.TelegramLastName,
		&i.Created,
	)
	return i, err
}

const createConversation = `-- name: CreateConversation :one

INSERT INTO conversations (telegram_user_id, messages)
VALUES ($1, '[]'::jsonb) RETURNING id, telegram_user_id, messages, created, updated
`

// ------------------ Conversation Queries --------------------
func (q *Queries) CreateConversation(ctx context.Context, telegramUserID int64) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, createConversation, telegramUserID)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.TelegramUserID,
		&i.Messages,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscription_plan
(user_id, stripe_subscription_id, resources_included)
VALUES ($1, $2, $3) RETURNING id, user_id, stripe_subscription_id, resources_included, resources_used, created
`

type CreateSubscriptionParams struct {
	UserID               int64
	StripeSubscriptionID sql.NullString
	ResourcesIncluded    int32
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, createSubscription, arg.UserID, arg.StripeSubscriptionID, arg.ResourcesIncluded)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const deleteSubscriptionByStripeSubscriptionId = `-- name: DeleteSubscriptionByStripeSubscriptionId :one
DELETE FROM subscription_plan WHERE stripe_subscription_id = $1 RETURNING id, user_id, stripe_subscription_id, resources_included, resources_used, created
`

func (q *Queries) DeleteSubscriptionByStripeSubscriptionId(ctx context.Context, stripeSubscriptionID sql.NullString) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, deleteSubscriptionByStripeSubscriptionId, stripeSubscriptionID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const deleteUserByTelegramUserId = `-- name: DeleteUserByTelegramUserId :exec
DELETE FROM user_info WHERE telegram_user_id = $1
`

func (q *Queries) DeleteUserByTelegramUserId(ctx context.Context, telegramUserID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserByTelegramUserId, telegramUserID)
	return err
}

const getConversationByTelegramUserId = `-- name: GetConversationByTelegramUserId :one
SELECT id, telegram_user_id, messages, created, updated FROM conversations WHERE telegram_user_id = $1 LIMIT 1
`

func (q *Queries) GetConversationByTelegramUserId(ctx context.Context, telegramUserID int64) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversationByTelegramUserId, telegramUserID)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.TelegramUserID,
		&i.Messages,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getConversationHistory = `-- name: GetConversationHistory :one
SELECT id, telegram_user_id, messages, created, updated FROM conversations WHERE telegram_user_id = $1 LIMIT 1
`

func (q *Queries) GetConversationHistory(ctx context.Context, telegramUserID int64) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getConversationHistory, telegramUserID)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.TelegramUserID,
		&i.Messages,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getOrCreateConversation = `-- name: GetOrCreateConversation :one
INSERT INTO conversations (telegram_user_id, messages)
VALUES ($1, $2)
ON CONFLICT (telegram_user_id) DO UPDATE SET
  messages = EXCLUDED.messages,
  updated = CURRENT_TIMESTAMP
RETURNING id, telegram_user_id, messages, created, updated
`

type GetOrCreateConversationParams struct {
	TelegramUserID int64
	Messages       json.RawMessage
}

func (q *Queries) GetOrCreateConversation(ctx context.Context, arg GetOrCreateConversationParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, getOrCreateConversation, arg.TelegramUserID, arg.Messages)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.TelegramUserID,
		&i.Messages,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const getSubscriptionById = `-- name: GetSubscriptionById :one
SELECT id, user_id, stripe_subscription_id, resources_included, resources_used, created FROM subscription_plan WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubscriptionById(ctx context.Context, id int64) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionById, id)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const getSubscriptionByStripeSubscriptionId = `-- name: GetSubscriptionByStripeSubscriptionId :one
SELECT id, user_id, stripe_subscription_id, resources_included, resources_used, created FROM subscription_plan WHERE stripe_subscription_id = $1 LIMIT 1
`

func (q *Queries) GetSubscriptionByStripeSubscriptionId(ctx context.Context, stripeSubscriptionID sql.NullString) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByStripeSubscriptionId, stripeSubscriptionID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const getSubscriptionByTeamId = `-- name: GetSubscriptionByTeamId :one
SELECT id, user_id, stripe_subscription_id, resources_included, resources_used, created FROM subscription_plan WHERE user_id = $1 ORDER BY created LIMIT 1
`

func (q *Queries) GetSubscriptionByTeamId(ctx context.Context, userID int64) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByTeamId, userID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const getSubscriptionByTeamIdSubscriptionId = `-- name: GetSubscriptionByTeamIdSubscriptionId :one
SELECT id, user_id, stripe_subscription_id, resources_included, resources_used, created FROM subscription_plan WHERE user_id = $1 AND id = $2 LIMIT 1
`

type GetSubscriptionByTeamIdSubscriptionIdParams struct {
	UserID int64
	ID     int64
}

func (q *Queries) GetSubscriptionByTeamIdSubscriptionId(ctx context.Context, arg GetSubscriptionByTeamIdSubscriptionIdParams) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByTeamIdSubscriptionId, arg.UserID, arg.ID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const getUserByTelegramUserId = `-- name: GetUserByTelegramUserId :one
SELECT user_id, telegram_user_id, telegram_username, telegram_first_name, telegram_last_name, created FROM user_info WHERE telegram_user_id = $1 LIMIT 1
`

func (q *Queries) GetUserByTelegramUserId(ctx context.Context, telegramUserID int64) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, getUserByTelegramUserId, telegramUserID)
	var i UserInfo
	err := row.Scan(
		&i.UserID,
		&i.TelegramUserID,
		&i.TelegramUsername,
		&i.TelegramFirstName,
		&i.TelegramLastName,
		&i.Created,
	)
	return i, err
}

const incrementSubscriptionResourcesUsedByTeamId = `-- name: IncrementSubscriptionResourcesUsedByTeamId :one

UPDATE subscription_plan SET resources_used = resources_used + $1 WHERE user_id = $2 RETURNING id, user_id, stripe_subscription_id, resources_included, resources_used, created
`

type IncrementSubscriptionResourcesUsedByTeamIdParams struct {
	ResourcesUsed int32
	UserID        int64
}

// ------------------ Subscription Plan Queries --------------------
func (q *Queries) IncrementSubscriptionResourcesUsedByTeamId(ctx context.Context, arg IncrementSubscriptionResourcesUsedByTeamIdParams) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, incrementSubscriptionResourcesUsedByTeamId, arg.ResourcesUsed, arg.UserID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const resetSubscriptionResourcesUsed = `-- name: ResetSubscriptionResourcesUsed :one
UPDATE subscription_plan
SET resources_used = 0
WHERE user_id = $1
RETURNING id, user_id, stripe_subscription_id, resources_included, resources_used, created
`

func (q *Queries) ResetSubscriptionResourcesUsed(ctx context.Context, userID int64) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, resetSubscriptionResourcesUsed, userID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const setSubscriptionStripeIdByTeamId = `-- name: SetSubscriptionStripeIdByTeamId :one
UPDATE subscription_plan SET stripe_subscription_id = $2 WHERE user_id = $1 RETURNING id, user_id, stripe_subscription_id, resources_included, resources_used, created
`

type SetSubscriptionStripeIdByTeamIdParams struct {
	UserID               int64
	StripeSubscriptionID sql.NullString
}

func (q *Queries) SetSubscriptionStripeIdByTeamId(ctx context.Context, arg SetSubscriptionStripeIdByTeamIdParams) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, setSubscriptionStripeIdByTeamId, arg.UserID, arg.StripeSubscriptionID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const updateConversationMessages = `-- name: UpdateConversationMessages :one
UPDATE conversations 
SET messages = $2, updated = CURRENT_TIMESTAMP 
WHERE telegram_user_id = $1 
RETURNING id, telegram_user_id, messages, created, updated
`

type UpdateConversationMessagesParams struct {
	TelegramUserID int64
	Messages       json.RawMessage
}

func (q *Queries) UpdateConversationMessages(ctx context.Context, arg UpdateConversationMessagesParams) (Conversation, error) {
	row := q.db.QueryRowContext(ctx, updateConversationMessages, arg.TelegramUserID, arg.Messages)
	var i Conversation
	err := row.Scan(
		&i.ID,
		&i.TelegramUserID,
		&i.Messages,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
