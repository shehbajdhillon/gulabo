// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package postgres

import (
	"context"
	"database/sql"
)

const addUser = `-- name: AddUser :one

INSERT INTO user_info (email, full_name) VALUES ($1, $2) RETURNING user_id, email, full_name, onboarding_complete, created
`

type AddUserParams struct {
	Email    string
	FullName string
}

// ------------------ UserInfo Queries --------------------
func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, addUser, arg.Email, arg.FullName)
	var i UserInfo
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FullName,
		&i.OnboardingComplete,
		&i.Created,
	)
	return i, err
}

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscription_plan
(user_id, stripe_subscription_id, resources_included)
VALUES ($1, $2, $3) RETURNING id, user_id, stripe_subscription_id, resources_included, resources_used, created
`

type CreateSubscriptionParams struct {
	UserID               int64
	StripeSubscriptionID sql.NullString
	ResourcesIncluded    int32
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, createSubscription, arg.UserID, arg.StripeSubscriptionID, arg.ResourcesIncluded)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const deleteSubscriptionByStripeSubscriptionId = `-- name: DeleteSubscriptionByStripeSubscriptionId :one
DELETE FROM subscription_plan WHERE stripe_subscription_id = $1 RETURNING id, user_id, stripe_subscription_id, resources_included, resources_used, created
`

func (q *Queries) DeleteSubscriptionByStripeSubscriptionId(ctx context.Context, stripeSubscriptionID sql.NullString) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, deleteSubscriptionByStripeSubscriptionId, stripeSubscriptionID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM user_info WHERE user_id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, userID)
	return err
}

const getSubscriptionById = `-- name: GetSubscriptionById :one
SELECT id, user_id, stripe_subscription_id, resources_included, resources_used, created FROM subscription_plan WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSubscriptionById(ctx context.Context, id int64) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionById, id)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const getSubscriptionByStripeSubscriptionId = `-- name: GetSubscriptionByStripeSubscriptionId :one
SELECT id, user_id, stripe_subscription_id, resources_included, resources_used, created FROM subscription_plan WHERE stripe_subscription_id = $1 LIMIT 1
`

func (q *Queries) GetSubscriptionByStripeSubscriptionId(ctx context.Context, stripeSubscriptionID sql.NullString) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByStripeSubscriptionId, stripeSubscriptionID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const getSubscriptionByTeamId = `-- name: GetSubscriptionByTeamId :one
SELECT id, user_id, stripe_subscription_id, resources_included, resources_used, created FROM subscription_plan WHERE user_id = $1 ORDER BY created LIMIT 1
`

func (q *Queries) GetSubscriptionByTeamId(ctx context.Context, userID int64) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByTeamId, userID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const getSubscriptionByTeamIdSubscriptionId = `-- name: GetSubscriptionByTeamIdSubscriptionId :one
SELECT id, user_id, stripe_subscription_id, resources_included, resources_used, created FROM subscription_plan WHERE user_id = $1 AND id = $2 LIMIT 1
`

type GetSubscriptionByTeamIdSubscriptionIdParams struct {
	UserID int64
	ID     int64
}

func (q *Queries) GetSubscriptionByTeamIdSubscriptionId(ctx context.Context, arg GetSubscriptionByTeamIdSubscriptionIdParams) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByTeamIdSubscriptionId, arg.UserID, arg.ID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, email, full_name, onboarding_complete, created FROM user_info WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i UserInfo
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FullName,
		&i.OnboardingComplete,
		&i.Created,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT user_id, email, full_name, onboarding_complete, created FROM user_info WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, userID int64) (UserInfo, error) {
	row := q.db.QueryRowContext(ctx, getUserById, userID)
	var i UserInfo
	err := row.Scan(
		&i.UserID,
		&i.Email,
		&i.FullName,
		&i.OnboardingComplete,
		&i.Created,
	)
	return i, err
}

const incrementSubscriptionResourcesUsedByTeamId = `-- name: IncrementSubscriptionResourcesUsedByTeamId :one

UPDATE subscription_plan SET resources_used = resources_used + $1 WHERE user_id = $2 RETURNING id, user_id, stripe_subscription_id, resources_included, resources_used, created
`

type IncrementSubscriptionResourcesUsedByTeamIdParams struct {
	ResourcesUsed int32
	UserID        int64
}

// ------------------ Subscription Plan Queries --------------------
func (q *Queries) IncrementSubscriptionResourcesUsedByTeamId(ctx context.Context, arg IncrementSubscriptionResourcesUsedByTeamIdParams) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, incrementSubscriptionResourcesUsedByTeamId, arg.ResourcesUsed, arg.UserID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const resetSubscriptionResourcesUsed = `-- name: ResetSubscriptionResourcesUsed :one
UPDATE subscription_plan
SET resources_used = 0
WHERE user_id = $1
RETURNING id, user_id, stripe_subscription_id, resources_included, resources_used, created
`

func (q *Queries) ResetSubscriptionResourcesUsed(ctx context.Context, userID int64) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, resetSubscriptionResourcesUsed, userID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const setSubscriptionStripeIdByTeamId = `-- name: SetSubscriptionStripeIdByTeamId :one
UPDATE subscription_plan SET stripe_subscription_id = $2 WHERE user_id = $1 RETURNING id, user_id, stripe_subscription_id, resources_included, resources_used, created
`

type SetSubscriptionStripeIdByTeamIdParams struct {
	UserID               int64
	StripeSubscriptionID sql.NullString
}

func (q *Queries) SetSubscriptionStripeIdByTeamId(ctx context.Context, arg SetSubscriptionStripeIdByTeamIdParams) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, setSubscriptionStripeIdByTeamId, arg.UserID, arg.StripeSubscriptionID)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StripeSubscriptionID,
		&i.ResourcesIncluded,
		&i.ResourcesUsed,
		&i.Created,
	)
	return i, err
}

const updateOnboardingStatus = `-- name: UpdateOnboardingStatus :exec
UPDATE user_info SET onboarding_complete = $1 WHERE user_id = $2
`

type UpdateOnboardingStatusParams struct {
	OnboardingComplete bool
	UserID             int64
}

func (q *Queries) UpdateOnboardingStatus(ctx context.Context, arg UpdateOnboardingStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOnboardingStatus, arg.OnboardingComplete, arg.UserID)
	return err
}
